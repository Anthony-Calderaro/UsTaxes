[{"C:\\Users\\grims\\github\\OpenTaxes\\src\\index.js":"1","C:\\Users\\grims\\github\\OpenTaxes\\src\\serviceWorker.js":"2","C:\\Users\\grims\\github\\OpenTaxes\\src\\App.js":"3","C:\\Users\\grims\\github\\OpenTaxes\\src\\redux\\store.js":"4","C:\\Users\\grims\\github\\OpenTaxes\\src\\redux\\reducer.js":"5","C:\\Users\\grims\\github\\OpenTaxes\\src\\components\\w2.js":"6","C:\\Users\\grims\\github\\OpenTaxes\\src\\redux\\actions.js":"7","C:\\Users\\grims\\github\\OpenTaxes\\src\\components\\w2EmployerInfo.js":"8","C:\\Users\\grims\\github\\OpenTaxes\\src\\components\\w2EmployeeInfo.js":"9","C:\\Users\\grims\\github\\OpenTaxes\\src\\components\\menu.js":"10","C:\\Users\\grims\\github\\OpenTaxes\\src\\components\\createPDF.js":"11","C:\\Users\\grims\\github\\OpenTaxes\\src\\redux\\selectors.js":"12","C:\\Users\\grims\\github\\OpenTaxes\\src\\components\\labeledInput.js":"13","C:\\Users\\grims\\github\\OpenTaxes\\src\\data\\locationPostalCodes.js":"14","C:\\Users\\grims\\github\\OpenTaxes\\src\\data\\countries.js":"15","C:\\Users\\grims\\github\\OpenTaxes\\src\\pdfFiller\\fill1040Fields.js":"16","C:\\Users\\grims\\github\\OpenTaxes\\src\\pdfFiller\\1040flatFieldMappings.js":"17","C:\\Users\\grims\\github\\OpenTaxes\\src\\components\\w2Income.js":"18","C:\\Users\\grims\\github\\OpenTaxes\\src\\components\\familyInfo.js":"19"},{"size":943,"mtime":1606901144050,"results":"20","hashOfConfig":"21"},{"size":5227,"mtime":1606901067669,"results":"22","hashOfConfig":"21"},{"size":199,"mtime":1606901067686,"results":"23","hashOfConfig":"21"},{"size":546,"mtime":1606901144145,"results":"24","hashOfConfig":"21"},{"size":498,"mtime":1606901144818,"results":"25","hashOfConfig":"21"},{"size":1772,"mtime":1608526179276,"results":"26","hashOfConfig":"21"},{"size":534,"mtime":1608526179284,"results":"27","hashOfConfig":"21"},{"size":7386,"mtime":1608526179279,"results":"28","hashOfConfig":"21"},{"size":7872,"mtime":1608526179277,"results":"29","hashOfConfig":"21"},{"size":5840,"mtime":1608526179275,"results":"30","hashOfConfig":"21"},{"size":1072,"mtime":1608526179272,"results":"31","hashOfConfig":"21"},{"size":286,"mtime":1606901144819,"results":"32","hashOfConfig":"21"},{"size":5159,"mtime":1608526179274,"results":"33","hashOfConfig":"21"},{"size":1377,"mtime":1606901144729,"results":"34","hashOfConfig":"21"},{"size":5164,"mtime":1606901144728,"results":"35","hashOfConfig":"21"},{"size":2583,"mtime":1608526179282,"results":"36","hashOfConfig":"21"},{"size":458,"mtime":1608526179281,"results":"37","hashOfConfig":"21"},{"size":2922,"mtime":1608526179279,"results":"38","hashOfConfig":"21"},{"size":8004,"mtime":1608526179273,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"16nv99s",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"42"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"42"},"C:\\Users\\grims\\github\\OpenTaxes\\src\\index.js",[],["83","84"],"C:\\Users\\grims\\github\\OpenTaxes\\src\\serviceWorker.js",[],"C:\\Users\\grims\\github\\OpenTaxes\\src\\App.js",[],"C:\\Users\\grims\\github\\OpenTaxes\\src\\redux\\store.js",[],"C:\\Users\\grims\\github\\OpenTaxes\\src\\redux\\reducer.js",[],"C:\\Users\\grims\\github\\OpenTaxes\\src\\components\\w2.js",[],"C:\\Users\\grims\\github\\OpenTaxes\\src\\redux\\actions.js",[],"C:\\Users\\grims\\github\\OpenTaxes\\src\\components\\w2EmployerInfo.js",[],"C:\\Users\\grims\\github\\OpenTaxes\\src\\components\\w2EmployeeInfo.js",[],"C:\\Users\\grims\\github\\OpenTaxes\\src\\components\\menu.js",["85","86","87","88","89","90","91","92"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Hidden from '@material-ui/core/Hidden';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport {\r\n    NavLink,\r\n    useLocation\r\n} from \"react-router-dom\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    drawer: {\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: drawerWidth,\r\n            flexShrink: 0,\r\n        },\r\n    },\r\n    appBar: {\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: `calc(100% - ${drawerWidth}px)`,\r\n            marginLeft: drawerWidth,\r\n        },\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n        [theme.breakpoints.up('sm')]: {\r\n            display: 'none',\r\n        },\r\n    },\r\n    // necessary for content to be below app bar\r\n    toolbar: theme.mixins.toolbar,\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing(3),\r\n    },\r\n}));\r\n\r\nfunction ResponsiveDrawer(props) {\r\n    const location = useLocation()\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [mobileOpen, setMobileOpen] = React.useState(false);\r\n\r\n    const handleDrawerToggle = () => {\r\n        setMobileOpen(!mobileOpen);\r\n    };\r\n\r\n    const drawer = (\r\n        <div>\r\n            <h2>\r\n                Wages\r\n            </h2>\r\n\r\n            <Divider />\r\n            <List>\r\n                <ListItem \r\n                    button \r\n                    key='Employer Information'\r\n                    component={NavLink}\r\n                    exact activeClassName=\"current\"\r\n                    to=\"/w2employerinfo\"\r\n                    selected={location.pathname === \"/w2employerinfo\"}\r\n                >\r\n                    <ListItemText primary='Employer Information' />\r\n                </ListItem>\r\n            \r\n                <ListItem \r\n                    button \r\n                    key='Employee Information'\r\n                    component={NavLink} \r\n                    exact activeClassName=\"current\"\r\n                    to=\"/w2employeeinfo\"\r\n                    selected={location.pathname === \"/w2employeeinfo\"}\r\n                >\r\n                    <ListItemText primary='Employee Information' />\r\n                </ListItem>\r\n\r\n                <ListItem \r\n                    button \r\n                    key='Income'\r\n                    component={NavLink} \r\n                    exact activeClassName=\"current\"\r\n                    to=\"/w2income\"\r\n                    selected={location.pathname === \"/w2income\"}\r\n                >\r\n                    <ListItemText primary='Income' />\r\n                </ListItem>\r\n            </List>\r\n\r\n            <Divider />\r\n            <h2>\r\n                Personal\r\n            </h2>\r\n            <Divider />\r\n            \r\n            <List>\r\n                <ListItem\r\n                    button\r\n                    key='Submit'\r\n                    component={NavLink}\r\n                    exact activeClassName=\"current\"\r\n                    to=\"/familyinfo\"\r\n                    selected={location.pathname === \"/familyinfo\"}\r\n                >\r\n                    <ListItemText primary='Family Information' />\r\n                </ListItem>\r\n\r\n                <Divider />\r\n                <ListItem\r\n                    button\r\n                    key='Submit'\r\n                    component={NavLink}\r\n                    exact activeClassName=\"current\"\r\n                    to=\"/createPDF\"\r\n                    selected={location.pathname === \"/createPDF\"}\r\n                >\r\n                    <ListItemText primary='Review and Print' />\r\n                </ListItem>\r\n            </List>\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <nav className={classes.drawer} aria-label=\"mailbox folders\">\r\n                {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\r\n                <Hidden smUp implementation=\"css\">\r\n                    <Drawer\r\n                        variant=\"temporary\"\r\n                        anchor={theme.direction === 'rtl' ? 'right' : 'left'}\r\n                        open={mobileOpen}\r\n                        onClose={handleDrawerToggle}\r\n                        classes={{\r\n                            paper: classes.drawerPaper,\r\n                        }}\r\n                        ModalProps={{\r\n                            keepMounted: true, // Better open performance on mobile.\r\n                        }}\r\n                    >\r\n                        {drawer}\r\n                    </Drawer>\r\n                </Hidden>\r\n                <Hidden xsDown implementation=\"css\">\r\n                    <Drawer\r\n                        classes={{\r\n                            paper: classes.drawerPaper,\r\n                        }}\r\n                        variant=\"permanent\"\r\n                        open\r\n                    >\r\n                        {drawer}\r\n                    </Drawer>\r\n                </Hidden>\r\n            </nav>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ResponsiveDrawer;\r\n","C:\\Users\\grims\\github\\OpenTaxes\\src\\components\\createPDF.js",[],"C:\\Users\\grims\\github\\OpenTaxes\\src\\redux\\selectors.js",[],"C:\\Users\\grims\\github\\OpenTaxes\\src\\components\\labeledInput.js",[],"C:\\Users\\grims\\github\\OpenTaxes\\src\\data\\locationPostalCodes.js",[],"C:\\Users\\grims\\github\\OpenTaxes\\src\\data\\countries.js",[],"C:\\Users\\grims\\github\\OpenTaxes\\src\\pdfFiller\\fill1040Fields.js",["93","94","95","96","97","98","99","100","101","102","103","104","105","106","107"],"import fetch from 'node-fetch'\r\nimport {\r\n    drawImage,\r\n    drawLinesOfText,\r\n    drawRectangle,\r\n    drawText,\r\n    PDFArray,\r\n    PDFContentStream,\r\n    PDFDictionary,\r\n    PDFDocument,\r\n    PDFDocumentFactory,\r\n    PDFDocumentWriter,\r\n    PDFIndirectReference,\r\n    PDFName,\r\n    PDFNumber,\r\n    PDFRawStream,\r\n    PDFString,\r\n    PDFBool,\r\n    PDFDict,\r\n    PDFField,\r\n    PDFCheckBox,\r\n    PDFAcroForm,\r\n    PDFTextField,\r\n    StandardFonts\r\n} from 'pdf-lib'\r\nimport flatFieldMappings from './1040flatFieldMappings'\r\nimport { getAllDataFlat } from '../redux/selectors'\r\nimport { store } from '../redux/store';\r\n\r\nfunction fillPDField(\r\n    PDField,\r\n    text,\r\n) {\r\n    if (PDField instanceof PDFTextField){\r\n        PDField.acroField.dict.dict.set(PDFName.of('DA'), PDFString.of(\"/HelveticaLTStd-Bold 12.00 Tf\"))\r\n        PDField.setText(text)\r\n        // PDField.disableCombing()\r\n        // console.log(PDField)\r\n    } else if (PDField instanceof PDFCheckBox){\r\n        PDField.check()\r\n    }\r\n};\r\n\r\n// returns PDFDocument in the form of a Uint8Array\r\n// I'm using my repo's github pages hosting as a CDN because it's free and allows cross origin requests\r\nexport async function fillPDF() {\r\n    const information = getAllDataFlat(store.getState())\r\n\r\n    console.log(getAllDataFlat(store.getState()))\r\n\r\n    const pdfDoc = await PDFDocument.load(await fetch('https://thegrims.github.io/UsTaxes/tax_forms/f1040.pdf').then(res => res.arrayBuffer()))\r\n    const timesRoman = await pdfDoc.embedFont(StandardFonts.TimesRoman)\r\n    \r\n    const formFields = pdfDoc.getForm().getFields()\r\n    // fill fields with fieldNumber\r\n    formFields.forEach((PDField, index) => { if (PDField instanceof PDFTextField) {PDField.setText(index.toString())}})\r\n    // check all boxes\r\n    formFields.forEach((PDField, index) => { if (PDField instanceof PDFCheckBox) {PDField.check()}})\r\n    console.log(formFields)\r\n\r\n    Object.keys(flatFieldMappings).forEach(\r\n        key => information[key] && \r\n        fillPDField(\r\n            formFields[\r\n                flatFieldMappings[key]\r\n            ], \r\n            information[key]\r\n        )\r\n    )\r\n    formFields.forEach(formField => formField.enableReadOnly())\r\n    \r\n    const pdfBytes = await pdfDoc.save();\r\n    return pdfBytes\r\n}\r\n\r\n// opens new with filled information in the window of the component it is called from\r\nexport async function createPDFPopup () {\r\n    const PDF = await fillPDF()\r\n    const blob = new Blob([PDF], { type: 'application/pdf' });\r\n    const blobURL = URL.createObjectURL(blob);\r\n    window.open(blobURL)\r\n}","C:\\Users\\grims\\github\\OpenTaxes\\src\\pdfFiller\\1040flatFieldMappings.js",[],"C:\\Users\\grims\\github\\OpenTaxes\\src\\components\\w2Income.js",["108","109","110","111","112"],"import React, { useState } from 'react'\r\nimport { useForm } from 'react-hook-form'\r\nimport { Button, Box, Grow } from \"@material-ui/core\"\r\nimport { Link, useHistory } from \"react-router-dom\"\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { LabeledInput, LabeledDropdown, LabeledCheckBox } from './labeledInput'\r\nimport { saveFormData } from '../redux/actions'\r\nimport { getFormData } from '../redux/selectors'\r\n\r\nexport default function W2Income() {\r\n    const { register, handleSubmit, errors, control } = useForm()\r\n    const history = useHistory()\r\n    // const variable dispatch to allow use inside function\r\n    const dispatch = useDispatch()\r\n\r\n    const prevFormData = useSelector(state => getFormData(state, \"W2Income\"))\r\n\r\n    // component functions\r\n    const onSubmit = formData => {\r\n        console.log(\"formData: \", formData)\r\n        dispatch(saveFormData(formData, \"W2Income\"))\r\n        history.push(\"/familyinfo\")\r\n    }\r\n\r\n    return (\r\n        <Box display=\"flex\" justifyContent=\"center\">\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n\r\n                <Box display=\"flex\" justifyContent=\"flex-start\">\r\n                        <h2>Employee Income</h2>\r\n                </Box>\r\n\r\n                <LabeledInput\r\n                    strongLabel=\"Box 1 - \"\r\n                    label=\"Wages, tips, other compensation\"\r\n                    register={register}\r\n                    required={true}\r\n                    mask={\"$999999\"}\r\n                    pattern={/[0-9]*/}\r\n                    patternDescription={\"Input should be filled with numbers only\"}\r\n                    name=\"income\"\r\n                    defaultValue={prevFormData[\"income\"]}\r\n                    errors={errors}\r\n                />\r\n\r\n                <LabeledInput\r\n                    strongLabel=\"Box 2 - \"\r\n                    label=\"Federal income tax withheld\"\r\n                    register={register}\r\n                    required={true}\r\n                    mask={\"$999999\"}\r\n                    pattern={/[0-9]*/}\r\n                    patternDescription={\"Input should be filled with numbers only\"}\r\n                    name=\"federalIncomeTax\"\r\n                    defaultValue={prevFormData[\"federalIncomeTax\"]}\r\n                    errors={errors}\r\n                />\r\n\r\n                <Box display=\"flex\" justifyContent=\"flex-start\" paddingTop={2} paddingBottom={1}>\r\n                    <Box display=\"flex\" justifyContent=\"flex-start\" paddingRight={2}>\r\n                        <Button component={Link} to={\"w2employeeinfo\"} variant=\"contained\" color=\"secondary\" >\r\n                            Back\r\n                        </Button>\r\n                    </Box>\r\n\r\n                    <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n                        Save and Continue\r\n                    </Button>\r\n                </Box>\r\n            </form>\r\n        </Box>\r\n    )\r\n}","C:\\Users\\grims\\github\\OpenTaxes\\src\\components\\familyInfo.js",["113","114"],"import React, { useState } from 'react'\r\nimport { useForm } from 'react-hook-form'\r\nimport { Button, Box, Grow } from \"@material-ui/core\"\r\nimport { Link, useHistory } from \"react-router-dom\"\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { LabeledInput, LabeledDropdown, LabeledCheckBox } from './labeledInput'\r\nimport { saveFormData } from '../redux/actions'\r\nimport { getFormData } from '../redux/selectors'\r\n\r\nexport default function FamilyInfo() {\r\n    const { register, handleSubmit, errors, control } = useForm()\r\n    const history = useHistory()\r\n    // const variable dispatch to allow use inside function\r\n    const dispatch = useDispatch()\r\n\r\n    const prevFormData = useSelector(state => getFormData(state, \"familyInfo\"))\r\n    const [foreignAddress, setforeignAddress] = useState(prevFormData.foreignAddress === \"true\")\r\n\r\n    // component functions\r\n    const onSubmit = formData => {\r\n        console.log(\"formData: \", formData)\r\n        dispatch(saveFormData(formData, \"familyInfo\"))\r\n        history.push(\"/createPDF\")\r\n    }\r\n\r\n    return (\r\n        <Box display=\"flex\" justifyContent=\"center\">\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n\r\n                <Box display=\"flex\" justifyContent=\"flex-start\">\r\n                        <h2>Family Information</h2>\r\n                </Box>\r\n\r\n                <LabeledCheckBox\r\n                    foreignAddress={foreignAddress}\r\n                    setforeignAddress={setforeignAddress}\r\n                    control={control}\r\n                    description={\"Do you have a foreign address?\"}\r\n                />\r\n                \r\n                <LabeledInput\r\n                    label=\"Employee's First Name and Initial\"\r\n                    register={register}\r\n                    required={true}\r\n                    pattern={/^[A-Za-z ]+$/i}\r\n                    patternDescription={\"Input should only include letters and spaces\"}\r\n                    name={\"employeeFirstName\"}\r\n                    defaultValue={prevFormData[\"employeeFirstName\"]}\r\n                    errors={errors}\r\n                />\r\n                {/* \r\n\r\n                <LabeledInput\r\n                    strongLabel=\"Box E - \"\r\n                    label=\"Employee's First Name and Initial\"\r\n                    register={register}\r\n                    required={true}\r\n                    pattern={/^[A-Za-z ]+$/i}\r\n                    patternDescription={\"Input should only include letters and spaces\"}\r\n                    name={\"employeeFirstName\"}\r\n                    defaultValue={prevFormData[\"employeeFirstName\"]}\r\n                    errors={errors}\r\n                />\r\n                <LabeledInput\r\n                    label=\"Employee's Last Name and Suffix\"\r\n                    register={register}\r\n                    required={true}\r\n                    pattern={/^[A-Za-z ]+$/i}\r\n                    patternDescription={\"Input should only include letters and spaces\"}\r\n                    name={\"employeeLastName\"}\r\n                    defaultValue={prevFormData[\"employeeLastName\"]}\r\n                    errors={errors}\r\n                />\r\n                \r\n                <Box display=\"flex\" justifyContent=\"flex-start\">\r\n                    <p><strong>Box F - </strong>Employee's Address and Zip Code</p>\r\n                </Box>\r\n\r\n                <LabeledCheckBox\r\n                    foreignAddress={foreignAddress}\r\n                    setforeignAddress={setforeignAddress}\r\n                    control={control}\r\n                    description={\"Do you have a foreign address?\"}\r\n                />\r\n\r\n                <LabeledInput\r\n                    label=\"Employee's Address\" register={register}\r\n                    required={true}\r\n                    patternDescription={\"Input should only include letters and numbers\"}\r\n                    name=\"employeeAddress\"\r\n                    defaultValue={prevFormData[\"employeeAddress\"]}\r\n                    errors={errors}\r\n                />\r\n\r\n                <LabeledInput\r\n                    label=\"Employee's City\"\r\n                    register={register}\r\n                    required={true}\r\n                    name=\"employeeCity\"\r\n                    defaultValue={prevFormData[\"employeeCity\"]}\r\n                    errors={errors}\r\n                />\r\n                <Grow in={!foreignAddress} style={{ display: !foreignAddress ? 'block' : 'none' }}>\r\n                    <div>\r\n                        <LabeledDropdown\r\n                            label=\"Employee's State\"\r\n                            dropDownData={locationPostalCodes}\r\n                            valueMapping={locality => locality[1]}\r\n                            keyMapping={locality => locality[1]}\r\n                            textMapping={locality => locality[0] + ' - ' + locality[1]}\r\n                            control={control}\r\n                            required={!foreignAddress}\r\n                            name=\"employeeState\"\r\n                            defaultValue={prevFormData[\"employeeState\"]}\r\n                            errors={errors}\r\n                        />\r\n\r\n                        <LabeledInput\r\n                            label=\"Employee's Zip Code\"\r\n                            register={register}\r\n                            required={!foreignAddress}\r\n                            mask={\"99999-9999\"}\r\n                            pattern={/[0-9]{5}-[0-9]{4}/}\r\n                            patternDescription={\"Input should be filled with 9 numbers\"}\r\n                            name=\"employeeZip\"\r\n                            defaultValue={prevFormData[\"employeeZip\"]}\r\n                            errors={errors}\r\n                        />\r\n                    </div>\r\n                </Grow>\r\n\r\n                <Grow in={foreignAddress} style={{ display: foreignAddress ? 'block' : 'none' }}>\r\n                    <div>\r\n                        <LabeledInput\r\n                            label=\"Employee's Province or State\"\r\n                            register={register}\r\n                            required={foreignAddress}\r\n                            pattern={/^[A-Za-z]+$/i}\r\n                            patternDescription={\"Input should only include letters\"}\r\n                            name={\"employeeProvidence\"}\r\n                            defaultValue={prevFormData[\"employeeProvidence\"]}\r\n                            errors={errors}\r\n                        />\r\n                        <LabeledDropdown\r\n                            label=\"Employee's Country\"\r\n                            dropDownData={countries}\r\n                            control={control}\r\n                            required={foreignAddress}\r\n                            name=\"employeeCountry\"\r\n                            defaultValue={prevFormData[\"employeeCountry\"]}\r\n                            errors={errors}\r\n                        />\r\n                        <LabeledInput\r\n                            label=\"Employee's Postal Code\"\r\n                            register={register}\r\n                            required={foreignAddress}\r\n                            name={\"employeePostalCode\"}\r\n                            defaultValue={prevFormData[\"employeePostalCode\"]}\r\n                            errors={errors}\r\n                        />\r\n                    </div>\r\n                </Grow> */}\r\n\r\n                <Box display=\"flex\" justifyContent=\"flex-start\" paddingTop={2} paddingBottom={1}>\r\n                    <Box display=\"flex\" justifyContent=\"flex-start\" paddingRight={2}>\r\n                        <Button component={Link} to={\"w2income\"} variant=\"contained\" color=\"secondary\" >\r\n                            Back\r\n                        </Button>\r\n                    </Box>\r\n\r\n                    <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n                        Save and Continue\r\n                    </Button>\r\n                </Box>\r\n            </form>\r\n        </Box>\r\n    )\r\n}",{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","severity":1,"message":"120","line":2,"column":8,"nodeType":"121","messageId":"122","endLine":2,"endColumn":17},{"ruleId":"119","severity":1,"message":"123","line":3,"column":8,"nodeType":"121","messageId":"122","endLine":3,"endColumn":14},{"ruleId":"119","severity":1,"message":"124","line":4,"column":8,"nodeType":"121","messageId":"122","endLine":4,"endColumn":19},{"ruleId":"119","severity":1,"message":"125","line":8,"column":8,"nodeType":"121","messageId":"122","endLine":8,"endColumn":18},{"ruleId":"119","severity":1,"message":"126","line":11,"column":8,"nodeType":"121","messageId":"122","endLine":11,"endColumn":20},{"ruleId":"119","severity":1,"message":"127","line":13,"column":8,"nodeType":"121","messageId":"122","endLine":13,"endColumn":16},{"ruleId":"119","severity":1,"message":"128","line":14,"column":8,"nodeType":"121","messageId":"122","endLine":14,"endColumn":15},{"ruleId":"119","severity":1,"message":"129","line":15,"column":8,"nodeType":"121","messageId":"122","endLine":15,"endColumn":18},{"ruleId":"119","severity":1,"message":"130","line":6,"column":5,"nodeType":"121","messageId":"122","endLine":6,"endColumn":14},{"ruleId":"119","severity":1,"message":"131","line":7,"column":5,"nodeType":"121","messageId":"122","endLine":7,"endColumn":20},{"ruleId":"119","severity":1,"message":"132","line":8,"column":5,"nodeType":"121","messageId":"122","endLine":8,"endColumn":18},{"ruleId":"119","severity":1,"message":"133","line":9,"column":5,"nodeType":"121","messageId":"122","endLine":9,"endColumn":13},{"ruleId":"119","severity":1,"message":"134","line":11,"column":5,"nodeType":"121","messageId":"122","endLine":11,"endColumn":21},{"ruleId":"119","severity":1,"message":"135","line":12,"column":5,"nodeType":"121","messageId":"122","endLine":12,"endColumn":18},{"ruleId":"119","severity":1,"message":"136","line":14,"column":5,"nodeType":"121","messageId":"122","endLine":14,"endColumn":23},{"ruleId":"119","severity":1,"message":"137","line":15,"column":5,"nodeType":"121","messageId":"122","endLine":15,"endColumn":22},{"ruleId":"119","severity":1,"message":"138","line":16,"column":5,"nodeType":"121","messageId":"122","endLine":16,"endColumn":25},{"ruleId":"119","severity":1,"message":"139","line":19,"column":5,"nodeType":"121","messageId":"122","endLine":19,"endColumn":17},{"ruleId":"119","severity":1,"message":"140","line":21,"column":5,"nodeType":"121","messageId":"122","endLine":21,"endColumn":12},{"ruleId":"141","severity":1,"message":"142","line":74,"column":11,"nodeType":"143","messageId":"144","endLine":74,"endColumn":13},{"ruleId":"141","severity":1,"message":"142","line":75,"column":9,"nodeType":"143","messageId":"144","endLine":75,"endColumn":10},{"ruleId":"141","severity":1,"message":"145","line":75,"column":9,"nodeType":"143","messageId":"144","endLine":75,"endColumn":10},{"ruleId":"141","severity":1,"message":"145","line":76,"column":11,"nodeType":"143","messageId":"144","endLine":76,"endColumn":13},{"ruleId":"119","severity":1,"message":"146","line":1,"column":17,"nodeType":"121","messageId":"122","endLine":1,"endColumn":25},{"ruleId":"119","severity":1,"message":"147","line":3,"column":23,"nodeType":"121","messageId":"122","endLine":3,"endColumn":27},{"ruleId":"119","severity":1,"message":"148","line":7,"column":24,"nodeType":"121","messageId":"122","endLine":7,"endColumn":39},{"ruleId":"119","severity":1,"message":"149","line":7,"column":41,"nodeType":"121","messageId":"122","endLine":7,"endColumn":56},{"ruleId":"119","severity":1,"message":"150","line":12,"column":45,"nodeType":"121","messageId":"122","endLine":12,"endColumn":52},{"ruleId":"119","severity":1,"message":"147","line":3,"column":23,"nodeType":"121","messageId":"122","endLine":3,"endColumn":27},{"ruleId":"119","severity":1,"message":"148","line":7,"column":24,"nodeType":"121","messageId":"122","endLine":7,"endColumn":39},"no-native-reassign",["151"],"no-negated-in-lhs",["152"],"no-unused-vars","'PropTypes' is defined but never used.","Identifier","unusedVar","'AppBar' is defined but never used.","'CssBaseline' is defined but never used.","'IconButton' is defined but never used.","'ListItemIcon' is defined but never used.","'MenuIcon' is defined but never used.","'Toolbar' is defined but never used.","'Typography' is defined but never used.","'drawImage' is defined but never used.","'drawLinesOfText' is defined but never used.","'drawRectangle' is defined but never used.","'drawText' is defined but never used.","'PDFContentStream' is defined but never used.","'PDFDictionary' is defined but never used.","'PDFDocumentFactory' is defined but never used.","'PDFDocumentWriter' is defined but never used.","'PDFIndirectReference' is defined but never used.","'PDFRawStream' is defined but never used.","'PDFBool' is defined but never used.","no-mixed-operators","Unexpected mix of '<<' and '|'.","BinaryExpression","unexpectedMixedOperator","Unexpected mix of '|' and '<<'.","'useState' is defined but never used.","'Grow' is defined but never used.","'LabeledDropdown' is defined but never used.","'LabeledCheckBox' is defined but never used.","'control' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]